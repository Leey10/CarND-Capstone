VM environment setup method:

1. VM 和 Mac主机的联结 （code in VM， simulator in Mac）

	uWebSocketIO Starter Guide
	You can enter a Docker image that has all the Term 2 project dependencies by running:
	docker run -it -p 4567:4567 -v 'pwd':/work udacity/controls_kit:latest
	Once inside Docker you can clone over the GitHub project repositories and run the project from
	there.
	Port forwarding is required when running code on VM and simulator on host
	For security reasons, the VM does not automatically open port forwarding, so you need to manually
	enable port 4567. This is needed for the C++ program to successfully connect to the host simulator.
	Port Forwarding Instructions
	1. First open up Oracle VM VirtualBox
	2. Click on the default session and select settings.
	3. Click on Network, and then Advanced.
	4. Click on Port Forwarding
	5. Click on the green plus, adds new port forwarding rule.
	6. Add a rule that assigns 4567 as both the host port and guest Port, as in the screenshot.
	Setting up port forwarding for 4567 in Virtual Machine


2. VM 和 Mac主机共享文件的方法

	本人Udacity VM与主机共享文件操作过程：
	VirtualBox6 && Host Mac10.13.6 && Guest Ubuntu14
	主机与虚拟机互联
	1. vbox新建一个vboxnet0，可以看见ip的范围值，注意IP最低值和最高值。
	2. 主机ifconfig ，可以看见vboxnet0
	3. network 适配器，适配器1选NAT，适配器2选host-only，刚才新建的vboxnet0


	主机与虚拟机共享文件
	1. 配置系统，设备，添加VBoxGuestAddition6.0.14.iso
	2. 在主机中新建一个文件夹作为需要共享的文件比如share_host
	3. 配置系统，共享文件，添加对应的共享文件
	4. 虚拟机中新建一个共享文件夹，比如host，关联2个文件夹

	sudo mount -t vboxsf -o uid=$UID,gid=$(id -g) Ubuntu14 ~/host

	5.如果mount不上, 报错，说明guestaddtion没装上, 手动安装：

	sudo mkdir /media/cdrom


	lsblk  (适用于ubuntu)



	sudo mount /dev/sr0 /media/cdrom


	cd /media/cdrom
	#运行guestAddtion
	sudo ./VBoxLinuxAdditions.run


	#再次运行
	sudo ./VBoxLinuxAdditions.run
	sudo reboot
	#再次ssh 登录虚拟机
	sudo mount -t vboxsf -o uid=$UID,gid=$(id -g) share_host ~/host
	#在host中新建一个文件，回到主机，查看Ubuntu14中是否有新建的文件

3. VirtualBox 虚拟机 Ubuntu 磁盘扩容技术

	maybe yes 发表于2015-05-21 01:20
	原文链接 : http://blog.lmlphp.com/archives/118/How_to_expand_Ubuntu_disk_in_VirtualBox_virtual_machine  来自 : LMLPHP后院
	本文将讲解在 Mac OS X 下如何为 VirtualBox 虚拟机系统 Ubuntu 扩大磁盘容量。
	我第一次使用 VirtualBox 装虚拟机的时候，由于分区的时候没有注意，主分区才给了 4 个 G，导致后面越来越麻烦，软件都没法装了，最后还是删除掉重装了个系统。分区的时候需要特别留意，主分区最好要给到足够多的空间，最好是 40G 左右，虽然知道有办法可以解决这个问题，但是会很麻烦。后期如果在使用过程中，空间不够了，可以再次创建存储然后挂载到系统其他目录上。
	在 VirtualBox 的菜单栏中，设置->存储->控制器:SATA 处点击添加，此操作要求虚拟机为关机状态才可以添加，如下图所示。
	￼
	创建存储后，通过 fdisk 命令查看，发现新的存储 sdb 没有分区。
	rhett@ubuntu-may:~/Workspace$ sudo fdisk -l

	Disk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 512 bytes
	I/O size (minimum/optimal): 512 bytes / 512 bytes
	Disklabel type: dos
	Disk identifier: 0x9941d8ab

	Device     Boot    Start      End  Sectors  Size Id Type
	/dev/sda1  *        2048   499711   497664  243M 83 Linux
	/dev/sda2         501758 41940991 41439234 19.8G  5 Extended
	/dev/sda3         499712   501757     2046 1023K 83 Linux
	/dev/sda4       41940992 41943039     2048    1M 83 Linux
	/dev/sda5         501760 41940991 41439232 19.8G 8e Linux LVM

	Partition table entries are not in disk order.
	Disk /dev/sdb: 41.9 GiB, 44955238400 bytes, 87803200 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 512 bytes
	I/O size (minimum/optimal): 512 bytes / 512 bytes
	Disk /dev/mapper/ubuntu--may--vg-root: 3.2 GiB, 3460300800 bytes, 6758400 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 512 bytes
	I/O size (minimum/optimal): 512 bytes / 512 bytes
	Disk /dev/mapper/ubuntu--may--vg-swap_1: 508 MiB, 532676608 bytes, 1040384 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 512 bytes
	I/O size (minimum/optimal): 512 bytes / 512 bytes
	在新增加的硬盘空间里增加分区，如下命令：
	rhett@ubuntu-may:~/Workspace$ sudo fdisk /dev/sdb
	执行上面的命令后，会进入输入模式，分别选择 n ,p, ....中间默认，最后别忘了输入 w 保存分区。
	磁盘分区成功后，再次使用 fdisk 命令查看，可以看到多了一个 SDB1 磁盘分区。
	rhett@ubuntu-may:~/Workspace$ sudo fdisk -l

	Disk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 512 bytes
	I/O size (minimum/optimal): 512 bytes / 512 bytes
	Disklabel type: dos
	Disk identifier: 0x9941d8ab

	Device     Boot    Start      End  Sectors  Size Id Type
	/dev/sda1  *        2048   499711   497664  243M 83 Linux
	/dev/sda2         501758 41940991 41439234 19.8G  5 Extended
	/dev/sda3         499712   501757     2046 1023K 83 Linux
	/dev/sda4       41940992 41943039     2048    1M 83 Linux
	/dev/sda5         501760 41940991 41439232 19.8G 8e Linux LVM

	Partition table entries are not in disk order.
	Disk /dev/sdb: 41.9 GiB, 44955238400 bytes, 87803200 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 512 bytes
	I/O size (minimum/optimal): 512 bytes / 512 bytes
	Disklabel type: dos
	Disk identifier: 0x0ed64142

	Device     Boot Start      End  Sectors  Size Id Type
	/dev/sdb1        2048 87803199 87801152 41.9G 83 Linux

	Disk /dev/mapper/ubuntu--may--vg-root: 3.2 GiB, 3460300800 bytes, 6758400 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 512 bytes
	I/O size (minimum/optimal): 512 bytes / 512 bytes
	Disk /dev/mapper/ubuntu--may--vg-swap_1: 508 MiB, 532676608 bytes, 1040384 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 512 bytes
	I/O size (minimum/optimal): 512 bytes / 512 bytes
	格式化磁盘 sdb1 分区为 ext4 格式，如下命令所示：
	rhett@ubuntu-may:~/Workspace$ sudo mkfs -t ext4 /dev/sdb1
	mke2fs 1.42.10 (18-May-2014)
	Creating filesystem with 10975144 4k blocks and 2744320 inodes
	Filesystem UUID: 29ed7b70-2b0a-46fa-808d-f4203b3ff4c0
	Superblock backups stored on blocks:
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
	4096000, 7962624

	Allocating group tables: done
	Writing inode tables: done
	Creating journal (32768 blocks): done
	Writing superblocks and filesystem accounting information: done
	将新的磁盘存储空间挂载到一个空目录下，最好是新建的空目录，不然原来目录上的文件会消失。
	rhett@ubuntu-may:~/Workspace$ sudo mount /dev/sdb1 /home/rhett/
	最后，通过 $du -sh /home/rhett 命令查看，发现新挂载的目录有足够大的空间了。